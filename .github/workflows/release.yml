name: Release
on:
  # Enable manual run
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: "Which environment are you using?"
        required: true
        default: "development"
        options:
          - development
          - production

# Declare default permissions as readonly.
permissions: read-all

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.sha_short_step.outputs.sha_short }}
      timestamp: ${{ steps.timestamp_step.outputs.timestamp }}
      version: ${{ steps.version_step.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set sha_short
        id: sha_short_step
        run: echo "sha_short=$(git rev-parse --short=8 HEAD)" >> $GITHUB_OUTPUT

      - name: Check sha_short
        run: echo ${{ steps.sha_short_step.outputs.sha_short }}

      - name: Set timestamp
        id: timestamp_step
        run: echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Check timestamp
        run: echo ${{ steps.timestamp_step.outputs.timestamp }}

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            brew install yq
          fi
          yq --version

      - name: Set version
        id: version_step
        run: | 
          PUB_VERSION=$(yq '.version' < pubspec.yaml)
          echo "$PUB_VERSION"
          VERSION=$(echo "$PUB_VERSION" | sed -e "s/+\(.*\)$//g")
          echo "$VERSION"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check version
        run: echo ${{ steps.version_step.outputs.version }}

      - name: Show gh info
        run: gh --version

      - name: Create a release
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          if [ "$ENV" == "production" ]; then
            gh release create "$RELEASE" --latest --title "$RELEASE" --notes "Env: $ENV <br /> Version: $RELEASE"
          else
            gh release create "$RELEASE" --prerelease --title "$RELEASE" --notes "Env: $ENV <br /> Version: $RELEASE"
          fi
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ steps.version_step.outputs.version }}+${{ steps.timestamp_step.outputs.timestamp }}-${{ steps.sha_short_step.outputs.sha_short }}"
          VERSION: ${{ steps.version_step.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  remove_release:
      name: Remove release
      if: ${{ cancelled() || failure() }}
      runs-on: ubuntu-latest
      needs:
        - create_release
        - apk
        - aab
        - ios
        - macos
        - appimage
        - deb
        - rpm
        - zip
        - snap
        - msix
      steps:
        - uses: actions/checkout@v4

        - name: Show gh info
          run: gh --version

        - name: Remove a release
          run: |
            RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
            gh release delete -y --cleanup-tag "$RELEASE"
          env:
            ENV: ${{ github.event.inputs.env }}
            VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
            VERSION: ${{ needs.create_release.outputs.version }}
            GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  apk:
    name: Create apk
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - name: Build apk
        if: github.event.inputs.env == 'development'
        run: bash build-android.sh && flutter build apk --no-tree-shake-icons --flavor staging

      - name: Build apk
        if: github.event.inputs.env == 'production'
        run: flutter build apk --no-tree-shake-icons --flavor production

      # Package the build.
      - name: Copy build for Android
        run: |
          ls -la
          cp *.apk $GITHUB_WORKSPACE/PicGuard.apk
        working-directory: build/app/outputs/flutter-apk

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.apk
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties

  aab:
    name: Create appbundle
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install Deps
        run: flutter pub get

      - name: Configure Keystore for Android
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - name: Build appbundle
        if: github.event.inputs.env == 'development'
        run: bash build-android.sh && flutter build appbundle --no-tree-shake-icons --flavor staging

      - name: Build appbundle
        if: github.event.inputs.env == 'production'
        run: flutter build appbundle --no-tree-shake-icons --flavor production

      # Package the build.
      - name: Copy build for Android
        if: github.event.inputs.env == 'development'
        run: |
          ls -la
          cp *.aab $GITHUB_WORKSPACE/PicGuard.aab
        working-directory: build/app/outputs/bundle/stagingRelease

      - name: Copy build for Android
        if: github.event.inputs.env == 'production'
        run: |
          ls -la
          cp *.aab $GITHUB_WORKSPACE/PicGuard.aab
        working-directory: build/app/outputs/bundle/productionRelease

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.aab
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f android/app/upload-keystore.jks
          rm -f android/key.properties

  ios:
    name: Create ios
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving ios dependencies
        run: cd ios && pod install --repo-update && cd ..

      - name: Install the Apple certificate and provisioning profile
        env:
          CERT_BASE64: ${{ secrets.CERT_BASE64 }}
          CERT_DEV_BASE64: ${{ secrets.CERT_DEV_BASE64 }}
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          P12_DEV_BASE64: ${{ secrets.P12_DEV_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          PROVISION_PROFILE_BASE64: ${{ secrets.PROVISION_PROFILE_BASE64 }}
          PROVISION_PROFILE_DEV_BASE64: ${{ secrets.PROVISION_PROFILE_DEV_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          CERTIFICATE_DEV_PATH=$RUNNER_TEMP/build_certificate_dev.p12
          CERT_PATH=$RUNNER_TEMP/ios_distribution.cer
          CERT_DEV_PATH=$RUNNER_TEMP/development.cer
          PP_PATH=$RUNNER_TEMP/watermark_assistant_appstore.mobileprovision
          PP_DEV_PATH=$RUNNER_TEMP/watermark_assistant_dev.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$P12_DEV_BASE64" | base64 --decode --output $CERTIFICATE_DEV_PATH
          echo -n "$CERT_BASE64" | base64 --decode --output $CERT_PATH
          echo -n "$CERT_DEV_BASE64" | base64 --decode --output $CERT_DEV_PATH
          echo -n "$PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$PROVISION_PROFILE_DEV_BASE64" | base64 --decode --output $PP_DEV_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERTIFICATE_DEV_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $CERT_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security import $CERT_DEV_PATH -P "$P12_PASSWORD" -A -t cert -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          mv $PP_DEV_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build ipa
        if: github.event.inputs.env == 'development'
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to adhoc..."
          bash build-ios.sh && flutter build ipa --export-options-plist=ios/ExportOptions-debug.plist

      - name: Build ipa
        if: github.event.inputs.env == 'production'
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd ios && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build ipa --export-options-plist=ios/ExportOptions-release.plist

      # Package the build.
      - name: Copy build for iOS
        run: |
          ls -la
          cp *.ipa $GITHUB_WORKSPACE/PicGuard.ipa
        working-directory: build/ios/ipa

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.ipa
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          rm -f ~/Library/MobileDevice/Provisioning\ Profiles/watermark_assistant_*.mobileprovision

  macos:
    name: Create macos
    runs-on: macos-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: cd macos && pod install --repo-update && cd ..

      - name: Build macOS
        if: github.event.inputs.env == 'development'
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd macos && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          bash build-macos.sh && flutter build macos

      - name: Build macOS
        if: github.event.inputs.env == 'production'
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd macos && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          flutter build macos

      - name: Install certificates
        env:
          P12_BASE64_MAC: ${{ secrets.P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$P12_BASE64_MAC" | base64 --decode --output $CERTIFICATE_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$SIGNING_IDENTITY" --options runtime PicGuard.app -v
        working-directory: build/macos/Build/Products/Release
        env:
          SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          PROFILE_NAME=pg-profile
          KEYCHAIN_PROFILE_PATH=$RUNNER_TEMP/pg-profile-signing.keychain-db
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PROFILE_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PROFILE_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PROFILE_PATH
          
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI
          echo "Create keychain profile"
          xcrun notarytool store-credentials "$PROFILE_NAME" --keychain "$KEYCHAIN_PROFILE_PATH" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard.app" "PicGuard.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard.zip" --keychain-profile "$PROFILE_NAME" --keychain "$KEYCHAIN_PROFILE_PATH" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard.app"
        working-directory: build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Install appdmg
        run: |
          pnpm add -g appdmg

      - name: Build DMG
        run: |
          bash build-dmg.sh

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.dmg

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.dmg
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          if [ -f "$RUNNER_TEMP/pg-profile-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-profile-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-profile-signing.keychain-db
          fi

  appimage:
    name: Create AppImage
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libx11-dev pkg-config cmake clang ninja-build libblkid-dev liblzma-dev
          sudo apt install locate libfuse2
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool && mv appimagetool /usr/local/bin/

      - name: Install GStreamer
        # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
        run: |
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build AppImage
        run: flutter_distributor package --platform linux --targets appimage --artifact-name picguard.appimage

      # Package the build.
      - name: Copy build for AppImage
        run: |
          ls -laR
          cp ./**/*.AppImage $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.AppImage
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  deb:
    name: Create deb
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libx11-dev pkg-config cmake clang ninja-build libblkid-dev liblzma-dev
          sudo apt install rpm patchelf

      - name: Install GStreamer
        # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
        run: |
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build deb
        run: flutter_distributor package --platform linux --targets deb --artifact-name picguard.deb

      # Package the build.
      - name: Copy build for deb
        run: |
          ls -laR
          cp ./**/*.deb $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.deb
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  rpm:
    name: Create rpm
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "17.x"
          distribution: 'temurin'

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libx11-dev pkg-config cmake clang ninja-build libblkid-dev liblzma-dev

      - name: Install GStreamer
        # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
        run: |
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build RPM
        run: flutter_distributor package --platform linux --targets rpm --artifact-name picguard.rpm

      # Package the build.
      - name: Copy build for rpm
        run: |
          ls -laR
          cp ./**/*.rpm $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.rpm
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  zip:
    name: Create zip
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libx11-dev pkg-config cmake clang ninja-build libblkid-dev liblzma-dev
          sudo apt install -y p7zip-full p7zip-rar

      - name: Install GStreamer
        # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
        run: |
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build zip
        run: flutter_distributor package --platform linux --targets zip --artifact-name picguard.linux.zip

      # Package the build.
      - name: Copy build for zip
        run: |
          ls -laR
          cp ./**/*.linux.zip $GITHUB_WORKSPACE/
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.linux.zip
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  snap:
    name: Create snap
    runs-on: ubuntu-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies for Linux
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libx11-dev pkg-config cmake clang ninja-build libblkid-dev liblzma-dev

      - name: Setup LXD
        uses: canonical/setup-lxd@v0.1.1
        with:
          channel: latest/stable

      - name: Install GStreamer
        # Install libunwind-dev, see https://github.com/actions/runner-images/issues/6399#issuecomment-1285011525
        run: |
          sudo apt install -y libunwind-dev
          sudo apt install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Install snapcraft
        run: |
          sudo snap install snapcraft --classic

      - name: Build snap
        run: |
          snapcraft --verbose

      # Package the build.
      - name: Copy build for snap
        run: ls -la *.snap

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          RELEASE="$([[ "$ENV" == "development" ]] && echo "$VERSION_SUFFIX" || echo "$VERSION")"
          gh release upload "$RELEASE" ./*.snap
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

  msix:
    name: Create msix
    runs-on: windows-latest
    needs:
      - create_release
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Install certificates
        run: |
          echo $env:RUNNER_TEMP
          $env:CERTIFICATE_PATH = "$env:RUNNER_TEMP\picguard_windows.pfx"
          echo $env:WINDOWS_CERTIFICATE | openssl base64 -d -out $env:CERTIFICATE_PATH
          (get-content windows\packaging\msix\make_config.yaml) -replace 'CERTIFICATE_PATH_PLACEHOLDER', $env:CERTIFICATE_PATH -replace 'CERTIFICATE_PASSWORD_PLACEHOLDER', $env:WINDOWS_CERTIFICATE_PASSWORD | Out-File -encoding ASCII windows\packaging\msix\make_config.yaml
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}

      - name: Build msix
        run: flutter_distributor package --platform windows --targets msix --artifact-name picguard.msix

      # Package the build.
      - name: Copy build for msix
        run: |
          ls -R
          cp .\**\*.msix "$env:GITHUB_WORKSPACE\"
        working-directory: dist

      - name: Show gh info
        run: gh --version

      - name: Upload assets
        run: |
          $env:RELEASE = $(If ($env:ENV -eq "development") {"$env:VERSION_SUFFIX"} Else {"$env:VERSION"})
          # https://github.com/cli/cli/issues/5099
          gh release upload "$env:RELEASE" (get-item .\*.msix)
        env:
          ENV: ${{ github.event.inputs.env }}
          VERSION_SUFFIX: "${{ needs.create_release.outputs.version }}+${{ needs.create_release.outputs.timestamp }}-${{ needs.create_release.outputs.sha_short }}"
          VERSION: ${{ needs.create_release.outputs.version }}
          GH_TOKEN: ${{ secrets.PG_RELEASE_TOKEN }}

      - name: Clean up
        if: ${{ always() }}
        run: |
          echo "$env:RUNNER_TEMP\picguard_windows.pfx"
          remove-item -Path "$env:RUNNER_TEMP\picguard_windows.pfx" -Force -ErrorAction SilentlyContinue
          remove-item -Path "windows\packaging\msix\make_config.yaml" -Force -ErrorAction SilentlyContinue
