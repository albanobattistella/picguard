name: Test Windows msix

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  get_version:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version_step.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install yq
        run: |
          if ! command -v yq >/dev/null 2>&1; then
            echo "yq not exists"
            brew install yq
          fi
          yq --version

      - name: Set version
        id: version_step
        run: |
          VERSION=$(yq '.version' < pubspec.yaml)
          echo "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check version
        run: echo ${{ steps.version_step.outputs.version }}

  msix:
    name: Create msix
    runs-on: windows-latest
    needs:
      - get_version
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Configure .env
        run: |
          echo "$pwd"
          $bytes = echo $env:ENV_KEY | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$pwd\.env", $bytes)
        env:
          ENV_KEY: ${{ secrets.ENV_STG_BASE64_WINDOWS }}

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Install certificates
        run: |
          echo $env:RUNNER_TEMP
          $certificate_path = "$env:RUNNER_TEMP\picguard.pfx"
          # https://stackoverflow.com/questions/15414678/how-to-decode-a-base64-string
          # https://stackoverflow.com/questions/66239147/pfx-encoded-and-back-to-pfx-in-powershell
          $bytes = echo $env:WINDOWS_CERTIFICATE | %{[Convert]::FromBase64String($_)}
          [IO.File]::WriteAllBytes("$certificate_path", $bytes)
          (get-content pubspec.yaml) -replace 'PUBLISHER_NAME_PLACEHOLDER', $env:WINDOWS_PUBLISHER_NAME -replace 'IDENTITY_NAME_PLACEHOLDER', $env:WINDOWS_IDENTITY_NAME -replace 'CERTIFICATE_PATH_PLACEHOLDER', $certificate_path -replace 'CERTIFICATE_PASSWORD_PLACEHOLDER', $env:WINDOWS_CERTIFICATE_PASSWORD -replace 'PUBLISHER_PLACEHOLDER', $env:WINDOWS_PUBLISHER | Out-File -encoding utf8 pubspec.yaml
        env:
          WINDOWS_PUBLISHER_NAME: ${{ secrets.WINDOWS_PUBLISHER_NAME }}
          WINDOWS_IDENTITY_NAME: ${{ secrets.WINDOWS_IDENTITY_NAME }}
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
          WINDOWS_PUBLISHER: ${{ secrets.WINDOWS_PUBLISHER }}

      - name: Install flutter dependencies
        run: flutter pub get

      - name: Build windows
        run: flutter build windows --dart-define-from-file=.env

      - name: Crate msix
        run: |
          dart run msix:create --build-windows false --output-name "picguard_$env:VERSION`_windows_x86_64"
        env:
          VERSION: ${{ needs.get_version.outputs.version }}

      # Package the build.
      - name: Copy build for msix
        run: ls
        working-directory: build\windows\x64\runner\Release

      - uses: actions/upload-artifact@v4
        with:
          name: windows-msix-artifact
          path: |
            .\build\windows\x64\runner\Release\*.msix

      - name: Clean up
        if: ${{ always() }}
        run: |
          ls
          if (test-path -Path "$env:RUNNER_TEMP\picguard.pfx") {
            echo "$env:RUNNER_TEMP\picguard.pfx"
            remove-item -Path "$env:RUNNER_TEMP\picguard.pfx" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($env:RUNNER_TEMP\picguard.pfx) doesn't exist."
          }
          if (test-path -Path "$pwd\.env") {
            echo "Remove file($pwd\.env)"
            remove-item -Path "$pwd\.env" -Force -ErrorAction SilentlyContinue
          } else {
            echo "File($pwd\.env) doesn't exist."
          }
