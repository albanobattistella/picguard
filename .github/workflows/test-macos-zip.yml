name: Test macOS zip

on:
  workflow_dispatch:

# Declare default permissions as readonly.
permissions: read-all

jobs:
  macos_zip:
    name: Create macos zip
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.6'

      - name: Install flutter_distributor
        run: dart pub global activate flutter_distributor

      - name: Install p7zip
        run: brew install p7zip

      - name: Flutter doctor -v
        run: flutter doctor -v

      - name: Resolving flutter dependencies
        run: flutter pub get

      - name: Resolving macos dependencies
        run: cd macos && pod install --repo-update && cd ..

      - name: Build macOS
        run: |
          echo "╠ Removing build products and intermediate files from the build root..."
          cd macos && xcodebuild clean && cd ..
          echo "╠ Releasing to app store..."
          bash build-macos.sh && flutter build macos

      - name: Install certificates
        env:
          P12_BASE64_MAC: ${{ secrets.P12_BASE64_MAC }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/pg-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$P12_BASE64_MAC" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Code Signing
        run: /usr/bin/codesign --deep --force -s "$SIGNING_IDENTITY" --options runtime PicGuard.app -v
        working-directory: build/macos/Build/Products/Release
        env:
          SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}

      - name: Notarize app
        run: |
          PROFILE_NAME=pg-profile
          KEYCHAIN_PROFILE_PATH=$RUNNER_TEMP/pg-profile-signing.keychain-db
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PROFILE_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PROFILE_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PROFILE_PATH
          
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI
          echo "Create keychain profile"
          xcrun notarytool store-credentials "$PROFILE_NAME" --keychain "$KEYCHAIN_PROFILE_PATH" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_PASSWORD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service
          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "PicGuard.app" "PicGuard.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious
          echo "Notarize app"
          xcrun notarytool submit "PicGuard.zip" --keychain-profile "$PROFILE_NAME" --keychain "$KEYCHAIN_PROFILE_PATH" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "PicGuard.app"
        working-directory: build/macos/Build/Products/Release
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build zip
        run: |
          7z a picguard.macos.zip ./PicGuard.app
        working-directory: build/macos/Build/Products/Release

      # Package the build.
      - name: Copy build for zip
        run: ls -la *.macos.zip
        working-directory: build/macos/Build/Products/Release

      - uses: actions/upload-artifact@v4
        with:
          name: zip-artifact
          path: |
            ./build/macos/Build/Products/Release/*.macos.zip

      - name: Clean up
        if: ${{ always() }}
        run: |
          if [ -f "$RUNNER_TEMP/pg-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-signing.keychain-db
          fi
          if [ -f "$RUNNER_TEMP/pg-profile-signing.keychain-db" ]; then
            echo "$RUNNER_TEMP/pg-profile-signing.keychain-db"
            security delete-keychain $RUNNER_TEMP/pg-profile-signing.keychain-db
          fi
